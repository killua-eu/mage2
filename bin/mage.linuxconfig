#!/usr/bin/env bash

# ##################
# ### Load stuff ###
# ##################

DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

[ -f "/etc/mage/mage.conf" ] 	&& source "/etc/mage/mage.conf"
[ -f "$DIR/mage.conf" ] 	&& source "$DIR/../etc/mage.conf"

[[ -z ${SCRIPT} ]] && SCRIPT=`readlink -f $0`
[[ -z ${BINDIR} ]] && BINDIR=`dirname "${SCRIPT}"`
[[ -z ${LIBDIR} ]] && LIBDIR="${BINDIR}/../lib"
[[ -z ${VARDIR} ]] && VARDIR="${BINDIR}/../var"
[[ -z ${ETCDIR} ]] && ETCDIR="${BINDIR}/../etc"

for file in ${LIBDIR}/* ; do
  if [ -f "$file" ] ; then
    . "$file"
  fi
done

# ##################
# ### Do stuff   ###
# ##################

[ -f "/etc/portage/make.conf" ] && source "/etc/portage/make.conf"      # include make.conf
[ -f "${ETCDIR}/bootstrap.conf" ] && source "${ETCDIR}/bootstrap.conf"  # include bootstrap.conf


# $1 - file to check against (i.e. /proc/config.gz or /usr/src/linux/.config
# $2 - file(s) with required options (usually profiles/*/*/linuxconfig)
# $3 - toggle to only show problems
# TODO speed this script up
# TODO check for colisions/duplicate entries with dif. values in $1

[[ -f ${1} ]] || eexit "Can't find ${1}, exitting."
[[ -e ${2} ]] || eexit "Can't find ${2}, exitting."
[[ -f ${2} ]] && REQUIREMENTS="${2}"
[[ -d ${2} ]] && REQUIREMENTS="${2}/*"  # zgrep through all containing files if ${2} is a directory

# zgrep, unlike zcat, works on both, compressed and auncompressed files.
# zgrep also doesn't signal eof such as zless or zmore.
# {WANT_PARAM,WANT_VALUE} shall be from the requirements set
# {HAVE_PARAM,HAVE_VALUE} shall be from the kernel .config set
zgrep -h . ${REQUIREMENTS} | while read LINE; do 
  WANT_PARAM=`printf "$LINE" | grep ^[^#] | sed 's:#.*$::g' | awk -F'=' '{print $1}'`
  WANT_VALUE=`printf "$LINE" | grep ^[^#] | sed 's:#.*$::g' | awk -F'=' '{print $2}' |  sed 's/^[ \t]*//;s/[ \t]*$//'`
  if [ -n "${WANT_PARAM}" ]; then # WANT_PARAM is not null
 
     ### search for the param and value in the HAVE set
     HAVE_PARAM=`zgrep "${WANT_PARAM}=" ${1}`
     HAVE_VALUE=`echo "${HAVE_PARAM}" | awk -F'=' '{print $2}'`
     HAVE_PARAM=`echo "${HAVE_PARAM}" | awk -F'=' '{print $1}'`
     
     ### (HAVE = WANT) branch
     if echo "${HAVE_VALUE}" | grep -iq "${WANT_VALUE}"; then # Grep used as a case insensitive comparison..
         # show what's good only when problems parameter is not set
         [[ "${!#}" = "problems" ]] || echo "${GOOD}${HAVE_PARAM}=${HAVE_VALUE}" # ${!#} is the "last parameter" equivalent, replaces ${3}

     ### (HAVE != WANT) branch    
     else
     
         ### (HAVE != WANT) && (HAVE not NULL)
         if [ -n "${HAVE_VALUE}" ]; then  # value in kernel is not null but something else then expected

             ### (HAVE != WANT) && (HAVE not NULL) && (WANT = n) while (HAVE != n)
             if [ "${WANT_VALUE}" = "n" ] || [ "${WANT_VALUE}" = "N" ]; then  
                echo "${BAD}${HAVE_PARAM}=${HAVE_VALUE}${NORMAL}   [expected value: ${WANT_VALUE}]"         
             fi
             if [ "${WANT_VALUE}" = "y" ] || [ "${WANT_VALUE}" = "Y" ] || [ "${WANT_VALUE}" = "m" ] || [ "${WANT_VALUE}" = "M" ]; then
                 ### (HAVE != WANT) && (HAVE not NULL) && (WANT = m|y) while (HAVE = y|m)
                 if [ "${HAVE_VALUE}" = "y" ] || [ "${HAVE_VALUE}" = "Y" ] || [ "${HAVE_VALUE}" = "m" ] || [ "${HAVE_VALUE}" = "M" ]; then
                     echo "${WARN}${HAVE_PARAM}=${HAVE_VALUE}${NORMAL}   [expected value: ${WANT_VALUE}]"
                 ### (HAVE != WANT) && (HAVE not NULL) && (WANT = m|y) while (HAVE != y|m)
                 else 
                     echo "${BAD}${HAVE_PARAM}=${HAVE_VALUE}${NORMAL}   [expected value: ${WANT_VALUE}]" 
                 fi    
             fi
         else
             ### (HAVE != WANT) && (HAVE == NULL)
             if [ "${WANT_VALUE}" = "n" ] || [ "${WANT_VALUE}" = "N" ]; then
                 echo "${HILITE}${WANT_PARAM}=${WANT_VALUE}${NORMAL}   [option not set, while 'n' is required]"    
             else 
                 echo "${BAD}${WANT_PARAM}=${WANT_VALUE}${NORMAL}   [option not set at all, but should have been]"
             fi
         fi 
     fi
  fi
done
